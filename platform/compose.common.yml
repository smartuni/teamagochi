#
# Provides common service definitions which can be used
# in other compose file with the `extend` keyword.
#

x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 5s
  retries: 3
  start_period: 60s
  start_interval: 3s

services:
  proxy:
    image: nginx:1.25-alpine
    #ports:
      #- "127.0.0.1:${PROXY_PUBLIC_PORT}:80"
      #- "[::1]:${PROXY_PUBLIC_PORT}:80"
      #- "127.0.0.1:443:443"
      #- "[::1]:443:443"
    volumes:
      - "./proxy/proxy_params:/etc/nginx/proxy_params:ro"
      - "./proxy/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./proxy/templates/default.conf.template:/etc/nginx/templates/default.conf.template:ro"
      - "./data/ssl/certs:/etc/nginx/ssl"
    environment:
      PROXY_PUBLIC_PORT: ${PROXY_PUBLIC_PORT}
      # NOTE: picky about trailing slash
      DEVDASH_WEB_URL: http://devdash:8080/
      TEASHAN_WEB_URL: http://teashan:8080/
      TEASHAN_BS_WEB_URL: http://teashan:8081/
      MAILPIT_WEB_URL: http://mailpit:8025/mailbox/
      KEYCLOAK_WEB_URL: http://keycloak:8080/kc

  backend:
    image: ghcr.io/smartuni/teamagochi/web-backend:snapshot
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1"]
      <<: *common-healthcheck

  devdash:
    build:
      context: ./devdash
    environment:
      VITE_AUTHORITY: http://localhost:${PROXY_PUBLIC_PORT}/kc/realms/teamagochi
      VITE_CLIENT_ID: teamagochi-webapp

  teashan:
    build:
      context: ./teashan
    ports:
      # Don't use a proxy, just map them to the host
      - "127.0.0.1:5683:5683/udp" # [coap://]      CoAP over UDP (with experimental OSCORE)
      - "127.0.0.1:5683:5683/tcp" # [coap+tcp://]  CoAP over TCP (experimental) 
      - "127.0.0.1:5684:5684/udp" # [coaps://]     CoAP over DTLS
      - "127.0.0.1:5684:5684/tcp" # [coaps+tcp://] CoAP over TLS (experimental)
      - "127.0.0.1:5685:5685/udp" # [coap://]      CoAP over UDP
      # Bootstrap
      - "127.0.0.1:5783:5783/udp" # [coap://]      CoAP over UDP
      - "127.0.0.1:5784:5784/udp" # [coaps://]     CoAP over DTLS
    environment:
      NGINX_ENABLE: "false"
      # Overriding LESHAN_CMD and LESHAN_BS_CMD allows changing ports and more, see ./teashan/Dockerfile

  keycloak:
    build:
      context: ./keycloak
    command: ["start", "--optimized", "--import-realm"]
    environment:
      # NOTE: Uses a preconfigured Dockerfile, see ./keycloak/Dockerfile
      KC_DB_PASSWORD: "${POSTGRES_KC_PASSWORD}"
      KC_PROXY_HEADERS: xforwarded
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_URL: http://localhost:${PROXY_PUBLIC_PORT}/kc
      KC_HOSTNAME_ADMIN_URL: http://localhost:${PROXY_PUBLIC_PORT}/kc
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
      KC_HOSTNAME_DEBUG: "true"
      #KC_LOG_LEVEL: debug
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1"]
      <<: *common-healthcheck
    volumes:
      - "./data/keycloak/import:/opt/keycloak/data/import"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    # Not the latest version, but recommended by Keycloak.
    # See https://www.keycloak.org/server/db#_supported_databases
    image: postgres:15.6-bookworm
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      TZ: "Europe/Berlin"
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth=scram-sha-256
      # Vars for database init scripts
      POSTGRES_KC_USER: keycloak
      POSTGRES_KC_DB: keycloak
      POSTGRES_KC_PASSWORD: ${POSTGRES_KC_PASSWORD}
      POSTGRES_BACKEND_USER: backend
      POSTGRES_BACKEND_DB: backend
      POSTGRES_BACKEND_PASSWORD: ${POSTGRES_BACKEND_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-h", "postgres", "-d", "postgres", "-U", "postgres" ]
      <<: *common-healthcheck
    volumes:
      - postgres:/var/lib/postgresql/data
      - "./postgres/initdb.d/init-keycloak-db.sh:/docker-entrypoint-initdb.d/init-keycloak-db.sh"
      - "./data/db/import/keycloak-db.dump:/docker-entrypoint-initdb.d/keycloak-db.dump"

  mailpit:
    image: axllent/mailpit
    environment:
      TZ: "Europe/Berlin"
      MP_WEBROOT: /mailbox/
      MP_MAX_MESSAGES: 100
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
      MP_QUIET: "true"
